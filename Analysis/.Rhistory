pathSplit=strsplit(script_path, "/")
pathSplit=pathSplit[[1]]
pathSplit
pathSplit=strsplit(script_path, "/")
pathSplit
subjects=c(102,104:114,116:117,119:125,127:141,143:149); # 43 valid subjects
length(subjects)
subjects=c(102,104:105,108,110:112,114,117,120:123,127,129:131,133:136,138:140,144); # Define here your subjects' codes.
pathSplit=strsplit(script_path, "/")
pathSplit=pathSplit[[1]]
pathSplit
pathSplit=strsplit(script_path, "/")
pathSplit[[1]]
pathSplit[[1]][1:2]
pathSplit[[1]][1:-2]
pathSplit[[1]][1:end-2]
pathSplit[[1]][-2]
pathSplit=strsplit(script_path, "/")
pathSplit=pathSplit[[1]][-2]
pathSplit
pathSplit=pathSplit[[1]][:-2]
pathSplit=pathSplit[[1]][-2]
pathSplit
pathSplit=strsplit(script_path, "/")
pathSplit=pathSplit[[1]][-2]
pathSplit
pathSplit=strsplit(script_path, "/")
t=pathSplit[[1]][-2]
t
t=pathSplit[[1]]
t
t=pathSplit[[1]][-end]
# Get current path
script_path = rstudioapi::getActiveDocumentContext()$path
pathSplit=strsplit(script_path, "/")
pathSplit=pathSplit[[1]]
main_path=paste0(pathSplit[1:(length(pathSplit)-2)],"/",collapse="")
## Original Sample
path=paste0(main_path,"../Output/")
subjects=c(102,104:114,116:117,119:125,127:141,143:149); # 43 valid subjects
path
filelist=c()
for (s in subjects){
filelist=c(filelist,Sys.glob(paste(path, "MRI_faces_",s,"_probe_block*.txt",sep="")))
}
MRI_faces=c()
for (f in filelist){
MRI_faces=rbind(MRI_faces,read.table(f,header=T,na.strings=c(999,999000)))
}
filelist
filelist
## Original Sample
path=paste0(main_path,"../Output/")
subjects=c(102,104:114,116:117,119:125,127:141,143:149); # 43 valid subjects
filelist=c()
for (s in subjects){
filelist=c(filelist,Sys.glob(paste(path, "MRI_faces_",s,"_probe_block*.txt",sep="")))
}
paste(path, "MRI_faces_",s,"_probe_block*.txt",sep="")
filelist=c(filelist,Sys.glob(paste(path, "MRI_faces_",s,"_probe_block*.txt",sep="")))
filelist
filelist=c(filelist,Sys.glob(paste(path, "*.txt",sep="")))
filelist
## Original Sample
path=paste0(main_path,"/Output/")
subjects=c(102,104:114,116:117,119:125,127:141,143:149); # 43 valid subjects
## Followup
path=paste0(main_path,"/Output/followup/")
subjects=c(102,104:105,108,110:112,114,117,120:123,127,129:131,133:136,138:140,144); # Define here your subjects' codes.
t
filelist=c()
for (s in subjects){
filelist=c(filelist,Sys.glob(paste(path, "MRI_faces_",s,"_probe_block*.txt",sep="")))
}
filelist
MRI_faces=c()
for (f in filelist){
MRI_faces=rbind(MRI_faces,read.table(f,header=T,na.strings=c(999,999000)))
}
MRI_faces$PairType2[MRI_faces$PairType==1]="High_Value"
MRI_faces$PairType2[MRI_faces$PairType==2]="Low_Value"
MRI_faces$PairType2[MRI_faces$PairType==4]="Sanity"
tapply(MRI_faces$Outcome,MRI_faces$PairType2,mean,na.rm=T)
summary(glmer(Outcome ~ 1 + (1|subjectID),data=subset(MRI_faces,(MRI_faces$PairType2=='High_Value')),na.action=na.omit,family=binomial))
summary(glmer(Outcome ~ 1 + (1|subjectID),data=subset(MRI_faces,(MRI_faces$PairType2=='Low_Value')),na.action=na.omit,family=binomial))
HV=summary(glmer(Outcome ~ 1 + (1|subjectID),data=subset(MRI_faces,(MRI_faces$PairType2=='High_Value')),na.action=na.omit,family=binomial))
LV=summary(glmer(Outcome ~ 1 + (1|subjectID),data=subset(MRI_faces,(MRI_faces$PairType2=='Low_Value')),na.action=na.omit,family=binomial))
HV_CI=c(HV$coefficients[1]-1.96*HV$coefficients[2],HV$coefficients[1]+1.96*HV$coefficients[2]) # HV Confidence interval (in log odds)
LV_CI=c(LV$coefficients[1]-1.96*LV$coefficients[2],LV$coefficients[1]+1.96*LV$coefficients[2]) # LV Confidence interval (in log odds)
exp(HV_CI)/(1+exp(HV_CI)) # HV Confidence interval (in proportions)
exp(LV_CI)/(1+exp(LV_CI)) # LV Confidence interval (in proportions)
summary(glmer(Outcome ~ 1 + PairType + (1|subjectID),data=subset(MRI_faces,MRI_faces$PairType %in% c(1,2)),na.action=na.omit,family=binomial)) #effect of Go choice for HH vs LL
summary(glmer(Outcome ~ 1 + (1|subjectID),data=subset(MRI_faces,MRI_faces$PairType %in% c(1,2)),na.action=na.omit,family=binomial)) #effect of Go choice for HH vs LL
library("lme4")
library("rstudioapi")
rm(list=ls())
# Get current path
script_path = rstudioapi::getActiveDocumentContext()$path
pathSplit=strsplit(script_path, "/")
pathSplit=pathSplit[[1]]
main_path=paste0(pathSplit[1:(length(pathSplit)-2)],"/",collapse="")
## Original Sample
path=paste0(main_path,"/Output/")
subjects=c(102,104:114,116:117,119:125,127:141,143:144,146:149); # 42 valid subjects
library("lme4")
library("rstudioapi")
rm(list=ls())
# Get current path
script_path = rstudioapi::getActiveDocumentContext()$path
pathSplit=strsplit(script_path, "/")
pathSplit=pathSplit[[1]]
main_path=paste0(pathSplit[1:(length(pathSplit)-2)],"/",collapse="")
main_path
## Original Sample
path=paste0(main_path,"/Output/")
subjects=c(102,104:114,116:117,119:125,127:141,143:144,146:149); # 42 valid subjects
filelist=c()
for (s in subjects){
filelist=c(filelist,Sys.glob(paste(path, "MRI_faces_",s,"_probe_block*.txt",sep="")))
}
MRI_faces=c()
for (f in filelist){
MRI_faces=rbind(MRI_faces,read.table(f,header=T,na.strings=c(999,999000)))
}
MRI_faces$PairType2[MRI_faces$PairType==1]="High_Value"
MRI_faces$PairType2[MRI_faces$PairType==2]="Low_Value"
MRI_faces$PairType2[MRI_faces$PairType==4]="Sanity"
tapply(MRI_faces$Outcome,MRI_faces$PairType2,mean,na.rm=T)
summary(glmer(Outcome ~ 1 + (1|subjectID),data=subset(MRI_faces,(MRI_faces$PairType2=='High_Value')),na.action=na.omit,family=binomial))
summary(glmer(Outcome ~ 1 + (1|subjectID),data=subset(MRI_faces,(MRI_faces$PairType2=='Low_Value')),na.action=na.omit,family=binomial))
HV=summary(glmer(Outcome ~ 1 + (1|subjectID),data=subset(MRI_faces,(MRI_faces$PairType2=='High_Value')),na.action=na.omit,family=binomial))
LV=summary(glmer(Outcome ~ 1 + (1|subjectID),data=subset(MRI_faces,(MRI_faces$PairType2=='Low_Value')),na.action=na.omit,family=binomial))
HV_CI=c(HV$coefficients[1]-1.96*HV$coefficients[2],HV$coefficients[1]+1.96*HV$coefficients[2]) # HV Confidence interval (in log odds)
LV_CI=c(LV$coefficients[1]-1.96*LV$coefficients[2],LV$coefficients[1]+1.96*LV$coefficients[2]) # LV Confidence interval (in log odds)
exp(HV$coefficients[1]) # HV (in OR)
HV$coefficients[4]*0.5 # p-value (one sided)
exp(HV_CI) # HV Confidence interval (in OR)
exp(LV$coefficients[1]) # LV (in OR)
LV$coefficients[4]*0.5 # p-value (one sided)
exp(LV_CI) # LV Confidence interval (in OR)
summary(glmer(Outcome ~ 1 + PairType + (1|subjectID),data=subset(MRI_faces,MRI_faces$PairType %in% c(1,2)),na.action=na.omit,family=binomial)) #effect of Go choice for HV vs LV
summary(glmer(Outcome ~ 1 + (1|subjectID),data=subset(MRI_faces,MRI_faces$PairType %in% c(1,2)),na.action=na.omit,family=binomial))  #effect of Go choice pooled over both HV vs LV
# Dependencies ----
library(rstudioapi)
library(lme4)
library(ggplot2)
library(reshape2)
# Set Workspace ----
rm(list=ls()) # Clear workspace
script_path = dirname(rstudioapi::getActiveDocumentContext()$path) # Get current path
# Set the datafile path. Change here if data file is not saved in the same directory as the script; e.g. "~/Downloads/"
data_path=paste0(script_path,"/")
output_path = data_path # where the plot will be saved
# Standard error function
se = function(x) { out=sqrt(var(x, na.rm = TRUE)/length(which(!is.na(x)))) }
# Load Data ----
file_name = "Probe_Data.csv"
probe_data=read.csv(paste0(data_path,file_name))
Results_df = c() # dataframe where results will be saved
n = c()
for (session_i in c(1,2)) {
# Descriptive Statistics ----
probe_data_tmp = subset(probe_data,session == session_i)
probe_data_tmp$PairType3 = factor(probe_data_tmp$PairType2,c("Low_Value","High_Value","Sanity")) # reorder the factor levels
n[session_i] = length(unique(probe_data_tmp$subjectID))
header_text = paste("Session",session_i,"-",probe_data_tmp$label[1],": Descriptive statistics")
writeLines(paste0("\n",header_text,"\n", paste0(rep("=",nchar(header_text)),collapse="")))
writeLines(paste("n =",n[session_i])) # Number of Participants
writeLines ("Proportion of trials Go items were chosen over NoGo:")
means = tapply(probe_data_tmp$Outcome,probe_data_tmp$PairType2,mean,na.rm=T)
means[3] = NA # ignore sanity trial but save last row for HV-LV differential effect statistics
SEM=c(se(with(data=subset(probe_data_tmp,PairType==1), tapply(Outcome, subjectID, mean, na.rm=T))),
se(with(data=subset(probe_data_tmp,PairType==2), tapply(Outcome, subjectID, mean, na.rm=T))),
NA)
comparisons = c("High Value","Low Value","Difference")
Results_df_tmp = data.frame(session_label = probe_data_tmp$label[1], comparison = comparisons, mean = means, SE = SEM,row.names = NULL)
# Logistic Regression analysis Statistics ----
HV = summary(glmer(Outcome ~ 1 + (1|subjectID),data=subset(probe_data_tmp,(PairType2=='High_Value')),na.action=na.omit,family=binomial))
LV = summary(glmer(Outcome ~ 1 + (1|subjectID),data=subset(probe_data_tmp,(PairType2=='Low_Value')),na.action=na.omit,family=binomial))
DIFF = summary(glmer(Outcome ~ 1 + PairType3 + (1|subjectID),data=subset(probe_data_tmp,PairType %in% c(1,2)),na.action=na.omit,family=binomial))
# Organize into dataframe ----
Results_df_tmp = cbind(Results_df_tmp, as.data.frame(rbind(HV$coefficients[1,],LV$coefficients[1,],DIFF$coefficients[2,])))
colnames(Results_df_tmp)[colnames(Results_df_tmp)=="Pr(>|z|)"] = "p"
# Significance indicator
Results_df_tmp$p [!Results_df_tmp$comparison=="Difference"] = Results_df_tmp$p[!Results_df_tmp$comparison=="Difference"] * 0.5 # make p one-sided for the simple effects
Results_df_tmp$asterisk="' '"
#Results_df_tmp$asterisk[Results_df_tmp$p<0.1]="'+'"
Results_df_tmp$asterisk[Results_df_tmp$p<0.1]="scriptstyle('+')"
Results_df_tmp$asterisk[Results_df_tmp$p<0.05]="'*'"
Results_df_tmp$asterisk[Results_df_tmp$p<0.01]="'**'"
Results_df_tmp$asterisk[Results_df_tmp$p<0.001]="'***'"
print(Results_df_tmp, right=FALSE, digits=3, row.names=FALSE) # display results
n_text = n[session_i]
sess_text = as.character(Results_df_tmp$session_label[1])
Results_df_tmp$session_label2 = c(bquote(atop(.(sess_text),italic(n) == .(n[session_i]))))  # x labels workaround
Results_df = rbind(Results_df,Results_df_tmp)
}
Results_df$CI_LogOdds_center=Results_df$Estimate
Results_df$CI_LogOdds_lower=Results_df$Estimate-Results_df$`Std. Error`*1.96
Results_df$CI_LogOdds_upper=Results_df$Estimate+Results_df$`Std. Error`*1.96
# 95% confidence interval (CI) and center estimate for the odds-ratio (no effect: odds-ratio=1)
Results_df$CI_OddsRatio_center=exp(Results_df$CI_LogOdds_center)
Results_df$CI_OddsRatio_lower=exp(Results_df$CI_LogOdds_lower)
Results_df$CI_OddsRatio_upper=exp(Results_df$CI_LogOdds_upper)
# Plot ----
plot_proportions =
ggplot(data=subset(Results_df,!comparison=="Difference"), aes(x=session_label, y=mean, fill=comparison)) +
geom_bar(width=.7,colour="black",position=position_dodge(0.7), stat="identity") + # Bar plot
theme_bw() + # white background
theme(legend.position="top",legend.title=element_blank()) + # position legend
theme(axis.title.x=element_blank(),axis.line = element_line(colour = "black"), panel.border = element_blank(), panel.background = element_blank()) + # axis and background formating
theme(aspect.ratio=1,text = element_text(size=26)) + # espenct ration and font size
geom_errorbar(position=position_dodge(.7), width=.7/4, aes(ymin=mean-SE, ymax=mean+SE))  + # add error bar of SEM
scale_y_continuous("Proportion of trials Go items were chosen",limit=c(0,1),breaks=seq(0, 1, 0.1),expand = c(0,0)) + # define y axis properties
scale_x_discrete(labels = unique(Results_df$session_label2))  + # x labels workaround
scale_fill_manual(values=c("#585858","#D8D8D8")) + # color of bars
geom_abline(intercept = (0.5),slope=0,linetype =2, size = 1,show.legend=TRUE,aes()) + # chace level 50% reference line
geom_text(parse = TRUE,position=position_dodge(.7),aes(y=mean+SE+0.05,label=(asterisk)),size=8) # significance asterisk
# add high-value - low-value differential effect significance asterisk
for (session_i in 1:2) {
differential_effect_ind = session_i*length(comparisons)
if (Results_df$p[differential_effect_ind]<.1) {
Lines_hight=max(Results_df$mean[differential_effect_ind-1]+Results_df$SE[differential_effect_ind-2])+0.13 # hight of significance line
tmp_df=data.frame(x_val=c(session_i-.7/4,session_i-.7/4,session_i+.7/4,session_i +.7/4),y_val=c(Lines_hight-0.02,Lines_hight,Lines_hight,Lines_hight-0.02)) # define shafe of an open rectangle above the bar
#tmp_df=rbind(tmp_df,tmp_df)
tmp_df$comparison=Results_df$comparison[1]  # for compatability with the general plot
plot_proportions = plot_proportions +
geom_line(data = tmp_df, aes(x=x_val,y = y_val)) + # draw open rectangle
annotate(parse = TRUE,"text", x = session_i, y = Lines_hight+0.05, label = (Results_df$asterisk[differential_effect_ind]),size=8) # differential effect significance asterisk
}
}
dev.new(width=1, height=1)
plot_proportions
# Save plot as pdf
pdf(file=paste0(output_path,'Probe_results_plot.pdf'), width=7, height=7)
dev.new(width=1, height=1)
plot_proportions
View(probe_data)
View(Results_df)
View(probe_data_tmp)
data_agg=as.data.frame(aggregate(probe_data,by=list(probe_data$subjectID,probe_data$PairType,probe_data$session), mean, na.rm=TRUE))
colnames(data_agg)[1] = "subjectID"
Data_by_sub=melt(data_agg,id = c("subjectID", "session" ,"PairType") ,"Outcome")
colnames(Data_by_sub)[ncol(Data_by_sub)] = "mean"
Data_by_sub$comparison = as.factor(Data_by_sub$PairType)
levels(Data_by_sub$comparison)= comparisons
Data_by_sub$session_label = as.factor(Data_by_sub$session)
levels(Data_by_sub$session_label) = levels(Results_df$session_label)
Data_by_sub = Data_by_sub[Data_by_sub$PairType<=2,]
Results_df$yloc = NA
for (row_i in 1:nrow(Results_df)) {
if  (Results_df$comparison[row_i]== "Difference"){
data_i = 0.2 + Data_by_sub$mean[(Data_by_sub$session_label == Results_df$session_label[row_i])]
} else {
data_i = 0.05 + Data_by_sub$mean[(Data_by_sub$session_label == Results_df$session_label[row_i]) &
(Data_by_sub$comparison == Results_df$comparison[row_i])]   }
Results_df$yloc[row_i] = max(data_i)
}
Results_df2 = subset(Results_df,!comparison=="Difference")
Results_df3 = subset(Results_df,comparison=="Difference")
tmp_df2 = tmp_df
tmp_df2$x_val = tmp_df2$x_val-1
tmp_df2$y_val = c(.94, .96, .96, .94)
dev.new(width=1, height=1)
ggplot(data=subset(Data_by_sub,!comparison=="Difference"), aes(x=session_label, y=mean, fill=comparison)) +
# geom_violin(trim=FALSE, position=position_dodge(.8))+
geom_boxplot(notch=TRUE, position=position_dodge(.8), outlier.color = "gray30", outlier.size = 1) +
theme_bw() + theme(legend.position="top",legend.title=element_blank()) + # position legend
theme(axis.title.x=element_blank(),axis.line = element_line(colour = "black"), panel.border = element_blank(), panel.background = element_blank()) + # axis and background formating
theme(aspect.ratio=1,text = element_text(size=20)) + # espenct ration and font size
# geom_dotplot(binaxis='y', position=position_dodge(.8), stackdir='center', dotsize=.5, color = 1) +
geom_hline(yintercept=0.5, linetype="dashed") +
# theme(aspect.ratio=1, legend.position="none") +
geom_text(data = Results_df2, aes(x=session_label, y = yloc, label = asterisk),parse = TRUE, position=position_dodge(.8), size = 10) +
geom_text(data = Results_df3, aes(x=session_label, y = 0.98, label = asterisk),parse = TRUE,size = 10) +
scale_fill_grey(start = 1, end = .4) +
geom_line(data = tmp_df2, aes(x=x_val,y = y_val)) +
scale_y_continuous("Proportion of trials Go items were chosen",limit=c(0,1),breaks=seq(0, 1, 0.1),expand = c(0,0))  # define y axis properties
ggplot(data=subset(Data_by_sub,!comparison=="Difference"), aes(x=session_label, y=mean, fill=comparison)) +
# geom_violin(trim=FALSE, position=position_dodge(.8))+
geom_boxplot(notch=TRUE, position=position_dodge(.8), outlier.color = "gray30", outlier.size = 1) +
theme_bw() + theme(legend.position="top",legend.title=element_blank()) + # position legend
theme(axis.title.x=element_blank(),axis.line = element_line(colour = "black"), panel.border = element_blank(), panel.background = element_blank()) + # axis and background formating
theme(aspect.ratio=1,text = element_text(size=20)) + # espenct ration and font size
# geom_dotplot(binaxis='y', position=position_dodge(.8), stackdir='center', dotsize=.5, color = 1) +
geom_hline(yintercept=0.5, linetype="dashed") +
# theme(aspect.ratio=1, legend.position="none") +
geom_text(data = Results_df2, aes(x=session_label, y = yloc, label = asterisk),parse = TRUE, position=position_dodge(.8), size = 10) +
geom_text(data = Results_df3, aes(x=session_label, y = 0.98, label = asterisk),parse = TRUE,size = 10) +
scale_fill_grey(start = 1, end = .4) +
geom_line(data = tmp_df2, aes(x=x_val,y = y_val)) +
scale_y_continuous("Proportion of trials Go items were chosen",limit=c(0,1),breaks=seq(0, 1, 0.1),expand = c(0,0))  # define y axis properties
ggplot(data=subset(Data_by_sub,!comparison=="Difference"), aes(x=session_label, y=mean, fill=comparison))
ggplot(data=subset(Data_by_sub,!comparison=="Difference"), aes(x=session_label, y=mean, fill=comparison)) +
# geom_violin(trim=FALSE, position=position_dodge(.8))+
geom_boxplot(notch=TRUE, position=position_dodge(.8), outlier.color = "gray30", outlier.size = 1)
ggplot(data=subset(Data_by_sub,!comparison=="Difference"), aes(x=session_label, y=mean, fill=comparison)) +
# geom_violin(trim=FALSE, position=position_dodge(.8))+
geom_boxplot(notch=TRUE, position=position_dodge(.8), outlier.color = "gray30", outlier.size = 1) +
theme_bw() + theme(legend.position="top",legend.title=element_blank())
ggplot(data=subset(Data_by_sub,!comparison=="Difference"), aes(x=session_label, y=mean, fill=comparison)) +
# geom_violin(trim=FALSE, position=position_dodge(.8))+
geom_boxplot(notch=TRUE, position=position_dodge(.8), outlier.color = "gray30", outlier.size = 1) +
theme_bw() + theme(legend.position="top",legend.title=element_blank()) + # position legend
theme(axis.title.x=element_blank(),axis.line = element_line(colour = "black"), panel.border = element_blank(), panel.background = element_blank()) + # axis and background formating
theme(aspect.ratio=1,text = element_text(size=20))
ggplot(data=subset(Data_by_sub,!comparison=="Difference"), aes(x=session_label, y=mean, fill=comparison)) +
# geom_violin(trim=FALSE, position=position_dodge(.8))+
geom_boxplot(notch=TRUE, position=position_dodge(.8), outlier.color = "gray30", outlier.size = 1) +
theme_bw() + theme(legend.position="top",legend.title=element_blank()) + # position legend
theme(axis.title.x=element_blank(),axis.line = element_line(colour = "black"), panel.border = element_blank(), panel.background = element_blank()) + # axis and background formating
theme(aspect.ratio=1,text = element_text(size=20)) + # espenct ration and font size
# geom_dotplot(binaxis='y', position=position_dodge(.8), stackdir='center', dotsize=.5, color = 1) +
geom_hline(yintercept=0.5, linetype="dashed")
ggplot(data=subset(Data_by_sub,!comparison=="Difference"), aes(x=session_label, y=mean, fill=comparison)) +
# geom_violin(trim=FALSE, position=position_dodge(.8))+
geom_boxplot(notch=TRUE, position=position_dodge(.8), outlier.color = "gray30", outlier.size = 1) +
theme_bw() + theme(legend.position="top",legend.title=element_blank()) + # position legend
theme(axis.title.x=element_blank(),axis.line = element_line(colour = "black"), panel.border = element_blank(), panel.background = element_blank()) + # axis and background formating
theme(aspect.ratio=1,text = element_text(size=20)) + # espenct ration and font size
# geom_dotplot(binaxis='y', position=position_dodge(.8), stackdir='center', dotsize=.5, color = 1) +
geom_hline(yintercept=0.5, linetype="dashed") +
# theme(aspect.ratio=1, legend.position="none") +
geom_text(data = Results_df2, aes(x=session_label, y = yloc, label = asterisk),parse = TRUE, position=position_dodge(.8), size = 10)
ggplot(data=subset(Data_by_sub,!comparison=="Difference"), aes(x=session_label, y=mean, fill=comparison)) +
# geom_violin(trim=FALSE, position=position_dodge(.8))+
geom_boxplot(notch=TRUE, position=position_dodge(.8), outlier.color = "gray30", outlier.size = 1) +
theme_bw() + theme(legend.position="top",legend.title=element_blank()) + # position legend
theme(axis.title.x=element_blank(),axis.line = element_line(colour = "black"), panel.border = element_blank(), panel.background = element_blank()) + # axis and background formating
theme(aspect.ratio=1,text = element_text(size=20)) + # espenct ration and font size
# geom_dotplot(binaxis='y', position=position_dodge(.8), stackdir='center', dotsize=.5, color = 1) +
geom_hline(yintercept=0.5, linetype="dashed") +
# theme(aspect.ratio=1, legend.position="none") +
geom_text(data = Results_df2, aes(x=session_label, y = yloc, label = asterisk),parse = TRUE, position=position_dodge(.8), size = 10) +
geom_text(data = Results_df3, aes(x=session_label, y = 0.98, label = asterisk),parse = TRUE,size = 10)
ggplot(data=subset(Data_by_sub,!comparison=="Difference"), aes(x=session_label, y=mean, fill=comparison)) +
# geom_violin(trim=FALSE, position=position_dodge(.8))+
geom_boxplot(notch=TRUE, position=position_dodge(.8), outlier.color = "gray30", outlier.size = 1) +
theme_bw() + theme(legend.position="top",legend.title=element_blank()) + # position legend
theme(axis.title.x=element_blank(),axis.line = element_line(colour = "black"), panel.border = element_blank(), panel.background = element_blank()) + # axis and background formating
theme(aspect.ratio=1,text = element_text(size=20)) + # espenct ration and font size
# geom_dotplot(binaxis='y', position=position_dodge(.8), stackdir='center', dotsize=.5, color = 1) +
geom_hline(yintercept=0.5, linetype="dashed") +
# theme(aspect.ratio=1, legend.position="none") +
geom_text(data = Results_df2, aes(x=session_label, y = yloc, label = asterisk),parse = TRUE, position=position_dodge(.8), size = 10) +
geom_text(data = Results_df3, aes(x=session_label, y = 0.98, label = asterisk),parse = TRUE,size = 10) +
scale_fill_grey(start = 1, end = .4)
ggplot(data=subset(Data_by_sub,!comparison=="Difference"), aes(x=session_label, y=mean, fill=comparison)) +
# geom_violin(trim=FALSE, position=position_dodge(.8))+
geom_boxplot(notch=TRUE, position=position_dodge(.8), outlier.color = "gray30", outlier.size = 1) +
theme_bw() + theme(legend.position="top",legend.title=element_blank()) + # position legend
theme(axis.title.x=element_blank(),axis.line = element_line(colour = "black"), panel.border = element_blank(), panel.background = element_blank()) + # axis and background formating
theme(aspect.ratio=1,text = element_text(size=20)) + # espenct ration and font size
# geom_dotplot(binaxis='y', position=position_dodge(.8), stackdir='center', dotsize=.5, color = 1) +
geom_hline(yintercept=0.5, linetype="dashed") +
# theme(aspect.ratio=1, legend.position="none") +
geom_text(data = Results_df2, aes(x=session_label, y = yloc, label = asterisk),parse = TRUE, position=position_dodge(.8), size = 10) +
geom_text(data = Results_df3, aes(x=session_label, y = 0.98, label = asterisk),parse = TRUE,size = 10) +
scale_fill_grey(start = 1, end = .4) +
geom_line(data = tmp_df2, aes(x=x_val,y = y_val)) +
scale_y_continuous("Proportion of trials Go items were chosen",limit=c(0,1),breaks=seq(0, 1, 0.1),expand = c(0,0))
ggplot(data=subset(Data_by_sub,!comparison=="Difference"), aes(x=session_label, y=mean, fill=comparison)) +
# geom_violin(trim=FALSE, position=position_dodge(.8))+
geom_boxplot(notch=TRUE, position=position_dodge(.8), outlier.color = "gray30", outlier.size = 1) +
theme_bw() + theme(legend.position="top",legend.title=element_blank()) + # position legend
theme(axis.title.x=element_blank(),axis.line = element_line(colour = "black"), panel.border = element_blank(), panel.background = element_blank()) + # axis and background formating
theme(aspect.ratio=1,text = element_text(size=20)) + # espenct ration and font size
# geom_dotplot(binaxis='y', position=position_dodge(.8), stackdir='center', dotsize=.5, color = 1) +
geom_hline(yintercept=0.5, linetype="dashed") +
# theme(aspect.ratio=1, legend.position="none") +
geom_text(data = Results_df2, aes(x=session_label, y = yloc, label = asterisk),parse = TRUE, position=position_dodge(.8), size = 10) +
geom_text(data = Results_df3, aes(x=session_label, y = 0.98, label = asterisk),parse = TRUE,size = 10) +
scale_fill_grey(start = 1, end = .4)
ggplot(data=subset(Data_by_sub,!comparison=="Difference"), aes(x=session_label, y=mean, fill=comparison)) +
# geom_violin(trim=FALSE, position=position_dodge(.8))+
geom_boxplot(notch=TRUE, position=position_dodge(.8), outlier.color = "gray30", outlier.size = 1) +
theme_bw() + theme(legend.position="top",legend.title=element_blank()) + # position legend
theme(axis.title.x=element_blank(),axis.line = element_line(colour = "black"), panel.border = element_blank(), panel.background = element_blank()) + # axis and background formating
theme(aspect.ratio=1,text = element_text(size=20)) + # espenct ration and font size
# geom_dotplot(binaxis='y', position=position_dodge(.8), stackdir='center', dotsize=.5, color = 1) +
geom_hline(yintercept=0.5, linetype="dashed") +
# theme(aspect.ratio=1, legend.position="none") +
geom_text(data = Results_df2, aes(x=session_label, y = yloc, label = asterisk),parse = TRUE, position=position_dodge(.8), size = 10) +
geom_text(data = Results_df3, aes(x=session_label, y = 0.98, label = asterisk),parse = TRUE,size = 10) +
scale_fill_grey(start = 1, end = .4) +
geom_line(data = tmp_df2, aes(x=x_val,y = y_val))
x_val
tmp_df2$x_val
Results_df2 = subset(Results_df,!comparison=="Difference")
Results_df3 = subset(Results_df,comparison=="Difference")
tmp_df2 = tmp_df
tmp_df2$x_val
ggplot(data=subset(Data_by_sub,!comparison=="Difference"), aes(x=session_label, y=mean, fill=comparison)) +
# geom_violin(trim=FALSE, position=position_dodge(.8))+
geom_boxplot(notch=TRUE, position=position_dodge(.8), outlier.color = "gray30", outlier.size = 1) +
theme_bw() + theme(legend.position="top",legend.title=element_blank()) + # position legend
theme(axis.title.x=element_blank(),axis.line = element_line(colour = "black"), panel.border = element_blank(), panel.background = element_blank()) + # axis and background formating
theme(aspect.ratio=1,text = element_text(size=20)) + # espenct ration and font size
# geom_dotplot(binaxis='y', position=position_dodge(.8), stackdir='center', dotsize=.5, color = 1) +
geom_hline(yintercept=0.5, linetype="dashed") +
# theme(aspect.ratio=1, legend.position="none") +
geom_text(data = Results_df2, aes(x=session_label, y = yloc, label = asterisk),parse = TRUE, position=position_dodge(.8), size = 10) +
geom_text(data = Results_df3, aes(x=session_label, y = 0.98, label = asterisk),parse = TRUE,size = 10) +
scale_fill_grey(start = 1, end = .4) +
geom_line(data = tmp_df2, aes(x=x_val,y = y_val))
Results_df2 = subset(Results_df,!comparison=="Difference")
Results_df3 = subset(Results_df,comparison=="Difference")
tmp_df2 = tmp_df
# tmp_df2$x_val = tmp_df2$x_val-1
tmp_df2$y_val = c(.94, .96, .96, .94)
dev.new(width=1, height=1)
ggplot(data=subset(Data_by_sub,!comparison=="Difference"), aes(x=session_label, y=mean, fill=comparison)) +
# geom_violin(trim=FALSE, position=position_dodge(.8))+
geom_boxplot(notch=TRUE, position=position_dodge(.8), outlier.color = "gray30", outlier.size = 1) +
theme_bw() + theme(legend.position="top",legend.title=element_blank()) + # position legend
theme(axis.title.x=element_blank(),axis.line = element_line(colour = "black"), panel.border = element_blank(), panel.background = element_blank()) + # axis and background formating
theme(aspect.ratio=1,text = element_text(size=20)) + # espenct ration and font size
# geom_dotplot(binaxis='y', position=position_dodge(.8), stackdir='center', dotsize=.5, color = 1) +
geom_hline(yintercept=0.5, linetype="dashed") +
# theme(aspect.ratio=1, legend.position="none") +
geom_text(data = Results_df2, aes(x=session_label, y = yloc, label = asterisk),parse = TRUE, position=position_dodge(.8), size = 10) +
geom_text(data = Results_df3, aes(x=session_label, y = 0.98, label = asterisk),parse = TRUE,size = 10) +
scale_fill_grey(start = 1, end = .4) +
geom_line(data = tmp_df2, aes(x=x_val,y = y_val))
Results_df2 = subset(Results_df,!comparison=="Difference")
Results_df3 = subset(Results_df,comparison=="Difference")
tmp_df2 = tmp_df
# tmp_df2$x_val = tmp_df2$x_val-1
tmp_df2$y_val = c(.94, .96, .96, .94)
dev.new(width=1, height=1)
ggplot(data=subset(Data_by_sub,!comparison=="Difference"), aes(x=session_label, y=mean, fill=comparison)) +
# geom_violin(trim=FALSE, position=position_dodge(.8))+
geom_boxplot(notch=TRUE, position=position_dodge(.8), outlier.color = "gray30", outlier.size = 1) +
theme_bw() + theme(legend.position="top",legend.title=element_blank()) + # position legend
theme(axis.title.x=element_blank(),axis.line = element_line(colour = "black"), panel.border = element_blank(), panel.background = element_blank()) + # axis and background formating
theme(aspect.ratio=1,text = element_text(size=20)) + # espenct ration and font size
# geom_dotplot(binaxis='y', position=position_dodge(.8), stackdir='center', dotsize=.5, color = 1) +
geom_hline(yintercept=0.5, linetype="dashed") +
# theme(aspect.ratio=1, legend.position="none") +
geom_text(data = Results_df2, aes(x=session_label, y = yloc, label = asterisk),parse = TRUE, position=position_dodge(.8), size = 10) +
geom_text(data = Results_df3, aes(x=session_label, y = 0.98, label = asterisk),parse = TRUE,size = 10) +
scale_fill_grey(start = 1, end = .4) +
geom_line(data = tmp_df2, aes(x=x_val,y = y_val)) +
scale_y_continuous("Proportion of trials Go items were chosen",limit=c(0,1),breaks=seq(0, 1, 0.1),expand = c(0,0))
ggplot(data=subset(Data_by_sub,!comparison=="Difference"), aes(x=session_label, y=mean, fill=comparison)) +
# geom_violin(trim=FALSE, position=position_dodge(.8))+
geom_boxplot(notch=TRUE, position=position_dodge(.8), outlier.color = "gray30", outlier.size = 1) +
theme_bw() + theme(legend.position="top",legend.title=element_blank()) + # position legend
theme(axis.title.x=element_blank(),axis.line = element_line(colour = "black"), panel.border = element_blank(), panel.background = element_blank()) + # axis and background formating
theme(aspect.ratio=1,text = element_text(size=20)) + # espenct ration and font size
# geom_dotplot(binaxis='y', position=position_dodge(.8), stackdir='center', dotsize=.5, color = 1) +
geom_hline(yintercept=0.5, linetype="dashed") +
# theme(aspect.ratio=1, legend.position="none") +
geom_text(data = Results_df2, aes(x=session_label, y = yloc, label = asterisk),parse = TRUE, position=position_dodge(.8), size = 10) +
geom_text(data = Results_df3, aes(x=session_label, y = 0.98, label = asterisk),parse = TRUE,size = 10) +
scale_fill_grey(start = 1, end = .4) +
geom_line(data = tmp_df2, aes(x=x_val,y = y_val)) +
scale_y_continuous("Proportion of trials Go items were chosen",limit=c(0,1),breaks=seq(0, 1, 0.1),expand = c(0,0)) +  # define y axis properties
geom_text(data = SummaryTable, aes(y = yloc*1.1, label = non_significant, fontface=3),size = 3)
geom_text(data = SummaryTable, aes(y = yloc*1.1, label = non_significant, fontface=3),size = 3) +
labs( x = x_lab, y = y_lab) +
theme(axis.title.x=element_blank(), axis.title.y=element_blank()) + # remove x and y labs
scale_fill_grey(start = 0.9, end = .2) +
Results_df_tmp$asterisk[Results_df_tmp$p<0.1]= "scriptstyle('+')"
Data_by_sub
plot(Data_by_sub$mean)
plot(Data_by_sub$mean[Data_by_sub$session==1])
plot(Data_by_sub$mean[Data_by_sub$session==1 & Data_by_sub$PairType==1],Data_by_sub$mean[Data_by_sub$session==1 & Data_by_sub$PairType==2])
# Plot ----
plot_proportions =
ggplot(data=subset(Results_df,!comparison=="Difference"), aes(x=session_label, y=mean, fill=comparison)) +
geom_bar(width=.7,colour="black",position=position_dodge(0.7), stat="identity") + # Bar plot
theme_bw() + # white background
theme(legend.position="top",legend.title=element_blank()) + # position legend
theme(axis.title.x=element_blank(),axis.line = element_line(colour = "black"), panel.border = element_blank(), panel.background = element_blank()) + # axis and background formating
theme(aspect.ratio=1,text = element_text(size=26)) + # espenct ration and font size
geom_errorbar(position=position_dodge(.7), width=.7/4, aes(ymin=mean-SE, ymax=mean+SE))  + # add error bar of SEM
scale_y_continuous("Proportion of trials Go items were chosen",limit=c(0,1),breaks=seq(0, 1, 0.1),expand = c(0,0)) + # define y axis properties
scale_x_discrete(labels = unique(Results_df$session_label2))  + # x labels workaround
scale_fill_manual(values=c("#585858","#D8D8D8")) + # color of bars
geom_abline(intercept = (0.5),slope=0,linetype =2, size = 1,show.legend=TRUE,aes()) + # chace level 50% reference line
geom_text(parse = TRUE,position=position_dodge(.7),aes(y=mean+SE+0.05,label=(asterisk)),size=8) # significance asterisk
plot_proportions
# Plot ----
plot_proportions =
ggplot(data=subset(Results_df,!comparison=="Difference"), aes(x=session_label, y=mean, fill=comparison)) +
geom_bar(width=.7,colour="black",position=position_dodge(0.7), stat="identity") + # Bar plot
theme_bw() + # white background
theme(legend.position="top",legend.title=element_blank()) + # position legend
theme(axis.title.x=element_blank(),axis.line = element_line(colour = "black"), panel.border = element_blank(), panel.background = element_blank()) + # axis and background formating
theme(aspect.ratio=1,text = element_text(size=26)) + # espenct ration and font size
geom_errorbar(position=position_dodge(.7), width=.7/4, aes(ymin=mean-SE, ymax=mean+SE))  + # add error bar of SEM
scale_y_continuous("Proportion of trials Go items were chosen",limit=c(0,1),breaks=seq(0, 1, 0.1),expand = c(0,0)) + # define y axis properties
scale_x_discrete(labels = unique(Results_df$session_label2))  + # x labels workaround
scale_fill_manual(values=c("#585858","#D8D8D8")) + # color of bars
geom_abline(intercept = (0.5),slope=0,linetype =2, size = 1,show.legend=TRUE,aes()) + # chace level 50% reference line
geom_text(parse = TRUE,position=position_dodge(.7),aes(y=mean+SE+0.05,label=(asterisk)),size=8) # significance asterisk
# add high-value - low-value differential effect significance asterisk
for (session_i in 1:2) {
differential_effect_ind = session_i*length(comparisons)
if (Results_df$p[differential_effect_ind]<.1) {
Lines_hight=max(Results_df$mean[differential_effect_ind-1]+Results_df$SE[differential_effect_ind-2])+0.13 # hight of significance line
tmp_df=data.frame(x_val=c(session_i-.7/4,session_i-.7/4,session_i+.7/4,session_i +.7/4),y_val=c(Lines_hight-0.02,Lines_hight,Lines_hight,Lines_hight-0.02)) # define shafe of an open rectangle above the bar
#tmp_df=rbind(tmp_df,tmp_df)
tmp_df$comparison=Results_df$comparison[1]  # for compatability with the general plot
plot_proportions = plot_proportions +
geom_line(data = tmp_df, aes(x=x_val,y = y_val)) + # draw open rectangle
annotate(parse = TRUE,"text", x = session_i, y = Lines_hight+0.05, label = (Results_df$asterisk[differential_effect_ind]),size=8) # differential effect significance asterisk
}
}
dev.new(width=1, height=1)
plot_proportions
