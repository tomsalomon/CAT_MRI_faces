Results_df$CI_OddsRatio_upper=exp(Results_df$CI_LogOdds_upper)
# Plot ----
plot_proportions =
ggplot(data=subset(Results_df,!comparison=="Difference"), aes(x=session_label, y=mean, fill=comparison)) +
geom_bar(width=.7,colour="black",position=position_dodge(0.7), stat="identity") + # Bar plot
theme_bw() + # white background
theme(legend.position="top",legend.title=element_blank()) + # position legend
theme(axis.title.x=element_blank(),axis.line = element_line(colour = "black"), panel.border = element_blank(), panel.background = element_blank()) + # axis and background formating
theme(aspect.ratio=1,text = element_text(size=20)) + # espenct ration and font size
geom_errorbar(position=position_dodge(.7), width=.7/4, aes(ymin=mean-SE, ymax=mean+SE))  + # add error bar of SEM
scale_y_continuous("Proportion of trials Go items were chosen",limit=c(0,1),breaks=seq(0, 1, 0.1),expand = c(0,0)) + # define y axis properties
scale_fill_manual(values=c("#585858","#D8D8D8")) + # color of bars
geom_abline(intercept = (0.5),slope=0,linetype =2, size = 1,show.legend=TRUE,aes()) + # chace level 50% reference line
geom_text(position=position_dodge(.7),aes(y=mean+SE+0.05,label=(asteriks)),size=8) # significance asteriks
# add high-value - low-value differential effect significance asteriks
for (session_i in 1:2) {
differential_effect_ind = session_i*length(comparisons)
if (!Results_df$asteriks[differential_effect_ind]=="") {
Lines_hight=max(Results_df$mean[differential_effect_ind-1]+Results_df$SE[differential_effect_ind-2])+0.13 # hight of significance line
tmp_df=data.frame(x_val=c(session_i-.7/4,session_i-.7/4,session_i+.7/4,session_i +.7/4),y_val=c(Lines_hight-0.02,Lines_hight,Lines_hight,Lines_hight-0.02)) # define shafe of an open rectangle above the bar
#tmp_df=rbind(tmp_df,tmp_df)
tmp_df$comparison=Results_df$comparison[1]  # for compatability with the general plot
plot_proportions = plot_proportions +
geom_line(data = tmp_df, aes(x=x_val,y = y_val)) + # draw open rectangle
annotate("text", x = session_i, y = Lines_hight+0.05, label = (Results_df$asteriks[differential_effect_ind]),size=8) # differential effect significance asteriks
}
}
dev.new(width=1, height=1)
plot_proportions
# General Description ----
# MANUSCRIPT TITLE
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Salomon, T., Botvinick-Nezer, R., Schonberg, T.
# Instructions:
#   1. Download the data file "Probe_Data_Session_I.csv" or the data file "Probe_Data_Session_I.csv". Save it in the same directory as the current script.
#      If the datafile is saved in a different directory, copy the local path of the data file to 'data_path' variable (line XX); e.g. "~/Downolads/"
#   2. Select the file to be analyzed by uncommenting the appropriate file name to 'my_datafile' variable (lines XX-XX)
#   3. If you do not have the 'lme4' and 'ggplot2' packages, install it (type to Consule 'install.packages("lme4")' or 'install.packages("ggplot2")').
# Data file description:
#   In the "probe_data.Rda" file you will find the raw data from the probe phase of ten experiments, and five follow-up sample from Experiments 1-2 and 7-9,
#   described in Salomon et al. (2017). The code analyses the proportion of trials participants chose the Go items over No-GO items using a logistic regression
#   with subject's code as a random effect. The analysis indicate significant proportions in comparison to the null hypothesis of 50% chance level (log-odds = 0).
#   It also computes 95% CI, and plot the results in a forest plot.
# Data frame variables:
# --------------------
# Variables used in the  analysis:
#   "Outcome" - Binary variable indicating whether participant chose the Go item (1) or the NoGo item (0). This is the dependent variable in the logistic regression analysis.
#   "subjectID" - Participant's code, is used as a random effect in the logistic regression analysis.
#   "PairType" - Categorical veriable indicating the type of comparison:
#         1 - High value: Go vs. NoGo
#         2 - Low value: Go vs. NoGo
#         3   (not used)
#         4 - Sanity NoGo: High value NoGo vs. low value NoGo
#   "PairType2" - Same as PairType variable, only as a character class
#    Results are analyzed separately for each pair type, or with PairType as a fixed effect to estimate differences of Go choices in high versus low value pairs.
# Other recorded variables:
#   "scanner" - Was the experiment conducted in an fMRI settings (True).
#   "order" - Used to counter-balance Go signal association during training
#   "block" - full presentation of all probe choices. Each experiment comprised of two blocks (1-2 in the first session, 3-4 in the second)
#   "run" - Each block was split into two runs, for compatibility with fMRI experimental settings.
#   "trial" - trial number
#   "onsettime" - Stimuli onset time
#   "ImageLeft" - The name of the stimulus left of the fixation cross
#   "ImageRight"- The name of the stimulus right of the fixation cross
#   "bidLeft" - The initial value of the stimulus left of the fixation cross (as estimate in a BDM or binary ranking task)
#   "bidRight" - The initial value of the stimulus right of the fixation cross (as estimate in a BDM or binary ranking task)
#   "bidIndexLeft" - The rank-order value of the stimulus left of the fixation cross (range: 1-60)
#   "bidIndexRight" - The rank-order value of the stimulus right of the fixation cross (range: 1-60)
#   "IsleftGo" - Binary variable indicating if the left stimulus is Go (1) or No-Go (0). In sanity choices, high value items are indicated similarly to Go items.
#   "Response" - participant's choice: "u" - left item, "i" for right items, "x" if subject did not responde on time (RT>1500 ms). When subject responded by choosing
#   the Go item (i.e. IsleftGo==1 & Response=="u", IsleftGo==0 & Response=="i"), the resulting Outcome will be (1).
#   "RT" - reaction time.
# Dependencies ----
library(rstudioapi)
library(lme4)
library(ggplot2)
# Set Workspace ----
rm(list=ls()) # Clear workspace
script_path = rstudioapi::getActiveDocumentContext()$path # Get current path
pathSplit=strsplit(script_path, "/")
pathSplit=pathSplit[[1]]
# Set the datafile path. Change here if data file is not saved in the same directory as the script; e.g. "~/Downloads/"
data_path=paste0(pathSplit[1:(length(pathSplit)-1)],"/",collapse="")
# Standard error function
se = function(x) { out=sqrt(var(x, na.rm = TRUE)/length(which(!is.na(x)))) }
# Load Data ----
file_name = "Probe_Data.csv"
probe_data=read.csv(paste0(data_path,file_name))
Results_df = c() # dataframe where results will be saved
for (session_i in c(1,2)) {
# Descriptive Statistics ----
probe_data_tmp = subset(probe_data,session == session_i)
probe_data_tmp$PairType3 = factor(probe_data_tmp$PairType2,c("Low_Value","High_Value","Sanity")) # reorder the factor levels
header_text = paste("Session",session_i,"-",probe_data_tmp$label[1],": Descriptive statistics")
writeLines(paste0("\n",header_text,"\n", paste0(rep("=",nchar(header_text)),collapse="")))
writeLines(paste("n =",length(unique(probe_data_tmp$subjectID)))) # Number of Participants
writeLines ("Proportion of trials Go items were chosen over NoGo:")
means = tapply(probe_data_tmp$Outcome,probe_data_tmp$PairType2,mean,na.rm=T)
means[3] = NA # ignore sanity trial but save last row for HV-LV differential effect statistics
SEM=c(se(with(data=subset(probe_data_tmp,PairType==1), tapply(Outcome, subjectID, mean, na.rm=T))),
se(with(data=subset(probe_data_tmp,PairType==2), tapply(Outcome, subjectID, mean, na.rm=T))),
NA)
comparisons = c("High Value","Low Value","Difference")
Results_df_tmp = data.frame(session_label = probe_data_tmp$label[1], comparison = comparisons, mean = means, SE = SEM,row.names = NULL)
# Logistic Regression analysis Statistics ----
HV = summary(glmer(Outcome ~ 1 + (1|subjectID),data=subset(probe_data_tmp,(PairType2=='High_Value')),na.action=na.omit,family=binomial))
LV = summary(glmer(Outcome ~ 1 + (1|subjectID),data=subset(probe_data_tmp,(PairType2=='Low_Value')),na.action=na.omit,family=binomial))
DIFF = summary(glmer(Outcome ~ 1 + PairType3 + (1|subjectID),data=subset(probe_data_tmp,PairType %in% c(1,2)),na.action=na.omit,family=binomial))
# Organize into dataframe ----
Results_df_tmp = cbind(Results_df_tmp, as.data.frame(rbind(HV$coefficients[1,],LV$coefficients[1,],DIFF$coefficients[2,])))
colnames(Results_df_tmp)[colnames(Results_df_tmp)=="Pr(>|z|)"] = "p"
# Significance indicator
Results_df_tmp$p [!Results_df_tmp$comparison=="Difference"] = Results_df_tmp$p/2 # make p one-sided for the simple effects
Results_df_tmp$asteriks=""
Results_df_tmp$asteriks[Results_df_tmp$p<0.1]="+"
Results_df_tmp$asteriks[Results_df_tmp$p<0.05]="*"
Results_df_tmp$asteriks[Results_df_tmp$p<0.01]="**"
Results_df_tmp$asteriks[Results_df_tmp$p<0.001]="***"
print(Results_df_tmp, right=FALSE, digits=3, row.names=FALSE) # display results
Results_df = rbind(Results_df,Results_df_tmp)
}
Results_df$CI_LogOdds_center=Results_df$Estimate
Results_df$CI_LogOdds_lower=Results_df$Estimate-Results_df$`Std. Error`*1.96
Results_df$CI_LogOdds_upper=Results_df$Estimate+Results_df$`Std. Error`*1.96
# 95% confidence interval (CI) and center estimate for the odds-ratio (no effect: odds-ratio=1)
Results_df$CI_OddsRatio_center=exp(Results_df$CI_LogOdds_center)
Results_df$CI_OddsRatio_lower=exp(Results_df$CI_LogOdds_lower)
Results_df$CI_OddsRatio_upper=exp(Results_df$CI_LogOdds_upper)
# Plot ----
plot_proportions =
ggplot(data=subset(Results_df,!comparison=="Difference"), aes(x=session_label, y=mean, fill=comparison)) +
geom_bar(width=.7,colour="black",position=position_dodge(0.7), stat="identity") + # Bar plot
theme_bw() + # white background
theme(legend.position="top",legend.title=element_blank()) + # position legend
theme(axis.title.x=element_blank(),axis.line = element_line(colour = "black"), panel.border = element_blank(), panel.background = element_blank()) + # axis and background formating
theme(aspect.ratio=1,text = element_text(size=30)) + # espenct ration and font size
geom_errorbar(position=position_dodge(.7), width=.7/4, aes(ymin=mean-SE, ymax=mean+SE))  + # add error bar of SEM
scale_y_continuous("Proportion of trials Go items were chosen",limit=c(0,1),breaks=seq(0, 1, 0.1),expand = c(0,0)) + # define y axis properties
scale_fill_manual(values=c("#585858","#D8D8D8")) + # color of bars
geom_abline(intercept = (0.5),slope=0,linetype =2, size = 1,show.legend=TRUE,aes()) + # chace level 50% reference line
geom_text(position=position_dodge(.7),aes(y=mean+SE+0.05,label=(asteriks)),size=8) # significance asteriks
# add high-value - low-value differential effect significance asteriks
for (session_i in 1:2) {
differential_effect_ind = session_i*length(comparisons)
if (!Results_df$asteriks[differential_effect_ind]=="") {
Lines_hight=max(Results_df$mean[differential_effect_ind-1]+Results_df$SE[differential_effect_ind-2])+0.13 # hight of significance line
tmp_df=data.frame(x_val=c(session_i-.7/4,session_i-.7/4,session_i+.7/4,session_i +.7/4),y_val=c(Lines_hight-0.02,Lines_hight,Lines_hight,Lines_hight-0.02)) # define shafe of an open rectangle above the bar
#tmp_df=rbind(tmp_df,tmp_df)
tmp_df$comparison=Results_df$comparison[1]  # for compatability with the general plot
plot_proportions = plot_proportions +
geom_line(data = tmp_df, aes(x=x_val,y = y_val)) + # draw open rectangle
annotate("text", x = session_i, y = Lines_hight+0.05, label = (Results_df$asteriks[differential_effect_ind]),size=8) # differential effect significance asteriks
}
}
dev.new(width=1, height=1)
plot_proportions
# General Description ----
# MANUSCRIPT TITLE
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Salomon, T., Botvinick-Nezer, R., Schonberg, T.
# Instructions:
#   1. Download the data file "Probe_Data_Session_I.csv" or the data file "Probe_Data_Session_I.csv". Save it in the same directory as the current script.
#      If the datafile is saved in a different directory, copy the local path of the data file to 'data_path' variable (line XX); e.g. "~/Downolads/"
#   2. Select the file to be analyzed by uncommenting the appropriate file name to 'my_datafile' variable (lines XX-XX)
#   3. If you do not have the 'lme4' and 'ggplot2' packages, install it (type to Consule 'install.packages("lme4")' or 'install.packages("ggplot2")').
# Data file description:
#   In the "probe_data.Rda" file you will find the raw data from the probe phase of ten experiments, and five follow-up sample from Experiments 1-2 and 7-9,
#   described in Salomon et al. (2017). The code analyses the proportion of trials participants chose the Go items over No-GO items using a logistic regression
#   with subject's code as a random effect. The analysis indicate significant proportions in comparison to the null hypothesis of 50% chance level (log-odds = 0).
#   It also computes 95% CI, and plot the results in a forest plot.
# Data frame variables:
# --------------------
# Variables used in the  analysis:
#   "Outcome" - Binary variable indicating whether participant chose the Go item (1) or the NoGo item (0). This is the dependent variable in the logistic regression analysis.
#   "subjectID" - Participant's code, is used as a random effect in the logistic regression analysis.
#   "PairType" - Categorical veriable indicating the type of comparison:
#         1 - High value: Go vs. NoGo
#         2 - Low value: Go vs. NoGo
#         3   (not used)
#         4 - Sanity NoGo: High value NoGo vs. low value NoGo
#   "PairType2" - Same as PairType variable, only as a character class
#    Results are analyzed separately for each pair type, or with PairType as a fixed effect to estimate differences of Go choices in high versus low value pairs.
# Other recorded variables:
#   "scanner" - Was the experiment conducted in an fMRI settings (True).
#   "order" - Used to counter-balance Go signal association during training
#   "block" - full presentation of all probe choices. Each experiment comprised of two blocks (1-2 in the first session, 3-4 in the second)
#   "run" - Each block was split into two runs, for compatibility with fMRI experimental settings.
#   "trial" - trial number
#   "onsettime" - Stimuli onset time
#   "ImageLeft" - The name of the stimulus left of the fixation cross
#   "ImageRight"- The name of the stimulus right of the fixation cross
#   "bidLeft" - The initial value of the stimulus left of the fixation cross (as estimate in a BDM or binary ranking task)
#   "bidRight" - The initial value of the stimulus right of the fixation cross (as estimate in a BDM or binary ranking task)
#   "bidIndexLeft" - The rank-order value of the stimulus left of the fixation cross (range: 1-60)
#   "bidIndexRight" - The rank-order value of the stimulus right of the fixation cross (range: 1-60)
#   "IsleftGo" - Binary variable indicating if the left stimulus is Go (1) or No-Go (0). In sanity choices, high value items are indicated similarly to Go items.
#   "Response" - participant's choice: "u" - left item, "i" for right items, "x" if subject did not responde on time (RT>1500 ms). When subject responded by choosing
#   the Go item (i.e. IsleftGo==1 & Response=="u", IsleftGo==0 & Response=="i"), the resulting Outcome will be (1).
#   "RT" - reaction time.
# Dependencies ----
library(rstudioapi)
library(lme4)
library(ggplot2)
# Set Workspace ----
rm(list=ls()) # Clear workspace
script_path = rstudioapi::getActiveDocumentContext()$path # Get current path
pathSplit=strsplit(script_path, "/")
pathSplit=pathSplit[[1]]
# Set the datafile path. Change here if data file is not saved in the same directory as the script; e.g. "~/Downloads/"
data_path=paste0(pathSplit[1:(length(pathSplit)-1)],"/",collapse="")
# Standard error function
se = function(x) { out=sqrt(var(x, na.rm = TRUE)/length(which(!is.na(x)))) }
# Load Data ----
file_name = "Probe_Data.csv"
probe_data=read.csv(paste0(data_path,file_name))
Results_df = c() # dataframe where results will be saved
for (session_i in c(1,2)) {
# Descriptive Statistics ----
probe_data_tmp = subset(probe_data,session == session_i)
probe_data_tmp$PairType3 = factor(probe_data_tmp$PairType2,c("Low_Value","High_Value","Sanity")) # reorder the factor levels
header_text = paste("Session",session_i,"-",probe_data_tmp$label[1],": Descriptive statistics")
writeLines(paste0("\n",header_text,"\n", paste0(rep("=",nchar(header_text)),collapse="")))
writeLines(paste("n =",length(unique(probe_data_tmp$subjectID)))) # Number of Participants
writeLines ("Proportion of trials Go items were chosen over NoGo:")
means = tapply(probe_data_tmp$Outcome,probe_data_tmp$PairType2,mean,na.rm=T)
means[3] = NA # ignore sanity trial but save last row for HV-LV differential effect statistics
SEM=c(se(with(data=subset(probe_data_tmp,PairType==1), tapply(Outcome, subjectID, mean, na.rm=T))),
se(with(data=subset(probe_data_tmp,PairType==2), tapply(Outcome, subjectID, mean, na.rm=T))),
NA)
comparisons = c("High Value","Low Value","Difference")
Results_df_tmp = data.frame(session_label = probe_data_tmp$label[1], comparison = comparisons, mean = means, SE = SEM,row.names = NULL)
# Logistic Regression analysis Statistics ----
HV = summary(glmer(Outcome ~ 1 + (1|subjectID),data=subset(probe_data_tmp,(PairType2=='High_Value')),na.action=na.omit,family=binomial))
LV = summary(glmer(Outcome ~ 1 + (1|subjectID),data=subset(probe_data_tmp,(PairType2=='Low_Value')),na.action=na.omit,family=binomial))
DIFF = summary(glmer(Outcome ~ 1 + PairType3 + (1|subjectID),data=subset(probe_data_tmp,PairType %in% c(1,2)),na.action=na.omit,family=binomial))
# Organize into dataframe ----
Results_df_tmp = cbind(Results_df_tmp, as.data.frame(rbind(HV$coefficients[1,],LV$coefficients[1,],DIFF$coefficients[2,])))
colnames(Results_df_tmp)[colnames(Results_df_tmp)=="Pr(>|z|)"] = "p"
# Significance indicator
Results_df_tmp$p [!Results_df_tmp$comparison=="Difference"] = Results_df_tmp$p/2 # make p one-sided for the simple effects
Results_df_tmp$asteriks=""
Results_df_tmp$asteriks[Results_df_tmp$p<0.1]="+"
Results_df_tmp$asteriks[Results_df_tmp$p<0.05]="*"
Results_df_tmp$asteriks[Results_df_tmp$p<0.01]="**"
Results_df_tmp$asteriks[Results_df_tmp$p<0.001]="***"
print(Results_df_tmp, right=FALSE, digits=3, row.names=FALSE) # display results
Results_df = rbind(Results_df,Results_df_tmp)
}
Results_df$CI_LogOdds_center=Results_df$Estimate
Results_df$CI_LogOdds_lower=Results_df$Estimate-Results_df$`Std. Error`*1.96
Results_df$CI_LogOdds_upper=Results_df$Estimate+Results_df$`Std. Error`*1.96
# 95% confidence interval (CI) and center estimate for the odds-ratio (no effect: odds-ratio=1)
Results_df$CI_OddsRatio_center=exp(Results_df$CI_LogOdds_center)
Results_df$CI_OddsRatio_lower=exp(Results_df$CI_LogOdds_lower)
Results_df$CI_OddsRatio_upper=exp(Results_df$CI_LogOdds_upper)
# Plot ----
plot_proportions =
ggplot(data=subset(Results_df,!comparison=="Difference"), aes(x=session_label, y=mean, fill=comparison)) +
geom_bar(width=.7,colour="black",position=position_dodge(0.7), stat="identity") + # Bar plot
theme_bw() + # white background
theme(legend.position="top",legend.title=element_blank()) + # position legend
theme(axis.title.x=element_blank(),axis.line = element_line(colour = "black"), panel.border = element_blank(), panel.background = element_blank()) + # axis and background formating
theme(aspect.ratio=1,text = element_text(size=26)) + # espenct ration and font size
geom_errorbar(position=position_dodge(.7), width=.7/4, aes(ymin=mean-SE, ymax=mean+SE))  + # add error bar of SEM
scale_y_continuous("Proportion of trials Go items were chosen",limit=c(0,1),breaks=seq(0, 1, 0.1),expand = c(0,0)) + # define y axis properties
scale_fill_manual(values=c("#585858","#D8D8D8")) + # color of bars
geom_abline(intercept = (0.5),slope=0,linetype =2, size = 1,show.legend=TRUE,aes()) + # chace level 50% reference line
geom_text(position=position_dodge(.7),aes(y=mean+SE+0.05,label=(asteriks)),size=8) # significance asteriks
# add high-value - low-value differential effect significance asteriks
for (session_i in 1:2) {
differential_effect_ind = session_i*length(comparisons)
if (!Results_df$asteriks[differential_effect_ind]=="") {
Lines_hight=max(Results_df$mean[differential_effect_ind-1]+Results_df$SE[differential_effect_ind-2])+0.13 # hight of significance line
tmp_df=data.frame(x_val=c(session_i-.7/4,session_i-.7/4,session_i+.7/4,session_i +.7/4),y_val=c(Lines_hight-0.02,Lines_hight,Lines_hight,Lines_hight-0.02)) # define shafe of an open rectangle above the bar
#tmp_df=rbind(tmp_df,tmp_df)
tmp_df$comparison=Results_df$comparison[1]  # for compatability with the general plot
plot_proportions = plot_proportions +
geom_line(data = tmp_df, aes(x=x_val,y = y_val)) + # draw open rectangle
annotate("text", x = session_i, y = Lines_hight+0.05, label = (Results_df$asteriks[differential_effect_ind]),size=8) # differential effect significance asteriks
}
}
dev.new(width=1, height=1)
plot_proportions
plot_proportions
dev.new(width=1, height=1)
plot_proportions
# Load libraries
library(stringr)
library(lme4)
library(lmerTest)
library(rstudioapi)
# Clear workspace
rm(list=ls())
# Define these variables:
sessionNum = 1 # 1- session 1 ; 2- follow-up
task_name = "Response"
buffer_around_blink = 150 # time in ms to remove around blink
screen=c(1920,1080) # size in pixels
buffer_around_image_factor = 1.2 # in relative size
fixcross_size = c(300,300) * buffer_around_image_factor; # size in pixels
stim_size = c(400, 500) * buffer_around_image_factor; # size in pixels
# location information
center=screen/2
location_stim=as.data.frame(matrix(unlist(c(center - stim_size/2, center + stim_size/2)),1,4,T))
location_fixcross=as.data.frame(matrix(unlist(c(center - fixcross_size/2, center + fixcross_size/2)),1,4,T))
colnames(location_stim) = c('min_x', 'min_y', 'max_x', 'max_y')
colnames(location_fixcross) = colnames(location_stim)
# CAT allocations
probe_items = c(7:18,43:54)
training_items = c(3:22,39:58)
go_items_order1 = c(7,10,12,13,15,18,44,45,47,50,52,53)
go_items_order2 = setdiff(probe_items,go_items_order1)
# define which subjects to analyze
if (sessionNum==1) {
subjects=c(102,104:114,116:117,119:125,127:141,143:149)
scans = c(1:2)
} else if (sessionNum==2) {
subjects=c(102,104:105,108,110:112,114,117,120:123,127,129:131,133:136,138:140,144)
scans = 3
}
ignore_bad_eye_tracking = c(107,110,122,124,130, 134,141, 145, 147,
120, 121, 137) # maybe
if (task_name == "Probe" & sessionNum == 1){
ignore_bad_eye_tracking = c(ignore_bad_eye_tracking,101,104,128)
} else if (sessionNum == 2){
ignore_bad_eye_tracking = c(ignore_bad_eye_tracking, 102, 105, 110, 121,122,123,135,143,
104) # maybe
}
subjects = subjects[-(subjects %in% ignore_bad_eye_tracking)]
# set paths
current_path=dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(current_path)
data_path = './../pre_processed_data/'
output_path = './analyzed_data/'
# Conversion from eyelink text file to data frame
eyetracker_text2df = function(x,filter='',delimiter = "\t") {
if (filter == '') {
dataframe_headers = c("time","x","y","pupil","V1","phase")
} else if (filter == 'SSACC') {
dataframe_headers = c("event","filler","empty","time")
delimiter = "\ "
} else if (filter == 'ESACC') {
dataframe_headers = c("event","time","duration","startx","starty","endx","endy","amplitude","velocity","startx2","starty2","endx2","endy2","amplitude2","velocity2")
} else if (filter == 'SFIX') {
dataframe_headers = c("event","filler","e1","e2","time")
delimiter = "\ "
} else if (filter == 'EFIX') {
dataframe_headers = c("event","time","duration","x","y","pupil","x2","y2","pupil2")
} else if (filter == 'SBLINK') {
dataframe_headers = c("event","filler","time")
delimiter = "\ "
} else if (filter == 'EBLINK') {
dataframe_headers = c("event","time","duration")
}
x_filtered = x[grep(filter,x)]
# deal with non-blinker subject
if (length(x_filtered) ==0) {
x_filtered = paste0(rep('\t ',length(dataframe_headers)))
}
df=structure(data.frame(matrix(unlist(strsplit(x_filtered,delimiter)),length(x_filtered),length(dataframe_headers),T)),  names=dataframe_headers)
for (col_i in 1:length(dataframe_headers)) {
is_numeric_col = mean(!is.na(suppressWarnings(as.numeric(as.character(df[,col_i])))))>0.05
if (is_numeric_col) {
df[,col_i]=suppressWarnings(as.numeric(as.character(df[,col_i])))
}
}
return(df)
}
filelist = data.frame(file_ind=integer(), subjectID=integer(), scan=integer(), behavioral=character(), eyetracking=character(),stringsAsFactors=F)
ind=0
for (s in subjects){
for (scan in scans){
ind=ind+1
filelist[ind,'file_ind'] = ind
filelist$subjectID[ind] = s
filelist$scan[ind] = scan
filelist$behavioral[ind]  = paste0("",Sys.glob(paste0(data_path,"*",s,"*",task_name,"*_",scan,".txt")))
filelist$eyetracking[ind] = paste0("",Sys.glob(paste0(data_path,"*",s,"*",task_name,"*_",scan,".asc")))  }
}
filelist$valid_eyetracker = !filelist$eyetracking==""
valid_files = filelist$file_ind[filelist$valid_eyetracker]
eyetrack_merged = c()
behave_merged = c()
# Loop over all files  ----------------------------------------
for (file_i in valid_files){
progress =round(which(valid_files==file_i)/length(valid_files),4)*100
print(paste0('Progress: ',progress,'%, File index: ',file_i))
# read behavioral data
behavioral=read.table(filelist$behavioral[file_i],header=T,na.strings=c(999,999000),sep="\t")
order = behavioral$order[1];
if (order == 1) {
go_items = go_items_order1
} else if (order == 2) {
go_items = go_items_order2
}
behavioral$scan = filelist$scan[file_i]
behavioral$ishvitem = behavioral$bidInd <=30
behavioral$isgoitem = behavioral$bidInd %in% go_items
behavioral$isprobeitem = behavioral$bidInd %in% probe_items
# read eyetracking data
input = readLines(filelist$eyetracking[file_i])
# get the frequency
freq_line =unlist(strsplit(input[grep('RATE',input)[1]],"\t"))
freq = as.numeric(freq_line[1+grep('RATE',freq_line)])
ssacc = eyetracker_text2df(input,'SSACC')
esacc = eyetracker_text2df(input,'ESACC')
sfix = eyetracker_text2df(input,'SFIX')
efix = eyetracker_text2df(input,'EFIX')
sblink = eyetracker_text2df(input,'SBLINK')
eblink = eyetracker_text2df(input,'EBLINK')
# on rare occasions eyelink 2 SFIX at the beginning of the file
if (nrow(sfix) - nrow(efix) == 1){
if (sfix$time[2] < efix$time[1]){
sfix=sfix[-2,]
}
}
# skip files with missmatch between events start and end - these are usualy empty or corrupted files
if (!(
(nrow(ssacc) == nrow(esacc)) & (nrow(sfix) == nrow(efix)) & (nrow(sblink) == nrow(eblink)))){
cat('\nWARNING! number of events do not match. skipping!\n',
'you should look at this file:',filelist$eyetracking[file_i],'\n')
next
}
#don't want header, figure out the first line that is not header
for (line_i in 1:2000){
if (!is.na(suppressWarnings(as.numeric(strsplit(input[line_i],"\t")[[1]][1])))){
firstline=line_i
break
}
}
exclude=c(1:firstline,grep("MSG|SFIX|EFIX|SSACC|ESAC|SBLINK|EBLINK|SAMPLES|INPUT",input))
eyetracking_data = eyetracker_text2df(input[-exclude])
eyetracking_data$subjectID = behavioral$subjectID[1]
eyetracking_data$session = sessionNum[1]
eyetracking_data$scan = scan[1]
eyetracking_data$trial = NA
eyetracking_data$value = NA
eyetracking_data$phase = NA
eyetracking_data$event = 'fixation' #assume all non blink or saccade is fixation
eyetracking_data$eventnumber = NA
eyetracking_data$valid = (!is.na(eyetracking_data$x)) & (!is.na(eyetracking_data$y))
# Analyze general eyetracking events: fixations, blinks and saccades =======================================
eyetracking_events = data.frame(start = c(sfix$time,ssacc$time,sblink$time),end = c(efix$time,esacc$time,eblink$time))
eyetracking_events$event = c(rep('fixation',nrow(sfix)), rep('saccade',nrow(ssacc)), rep('blink',nrow(sblink)))
eyetracking_events$eventnumber = c(1:nrow(sfix),1:nrow(ssacc), 1:nrow(sblink))
for (i in 1:length(eyetracking_events$event)){
s1 = which.min(abs(eyetracking_data$time - eyetracking_events$start[i]))
e1 = which.min(abs(eyetracking_data$time - eyetracking_events$end[i]))
eyetracking_data$event[s1:e1]=eyetracking_events$event[i]
eyetracking_data$eventnumber[s1:e1]=eyetracking_events$eventnumber[i]
#Account for blinks, get rid of 100ms before and after blink
if (eyetracking_events$event[i] == 'blink') {
s2 = which.min(abs(eyetracking_data$time - (eyetracking_events$start[i] - buffer_around_blink)))
e2 = which.min(abs(eyetracking_data$time - (eyetracking_events$end[i] + buffer_around_blink)))
eyetracking_data$valid[s2:e2]=FALSE
}
}
eyetracking_data$looking_at_stim = (eyetracking_data$x >= location_stim$min_x) & (eyetracking_data$y>=location_stim$min_y) & (eyetracking_data$x<=location_stim$max_x) & (eyetracking_data$y<=location_stim$max_y)
eyetracking_data$looking_at_stim[(is.na(eyetracking_data$looking_at_stim) | !eyetracking_data$valid)] = FALSE
#eyetracking_data$looking_at_fixation = (eyetracking_data$x >= location_fixcross$min_x) & (eyetracking_data$y>=location_fixcross$min_y) & (eyetracking_data$x<=location_fixcross$max_x) & (eyetracking_data$y<=location_fixcross$max_y)
# Analyze task behavioral data =======================================
behavioral$freq = freq
behavioral$gaze = NA
run_start_line=unlist(strsplit(input[grep("SYNCTIME",input)],"\t| "))
run_start_time=as.numeric(run_start_line[2])
trial_start_times=round(run_start_time+(behavioral$onset*1000))
trial_end_times=round(trial_start_times+(behavioral$duration*1000))
numtrials = length(behavioral$onset)
# classify lines in eyetracking_data to choice/confirmation/fixation
for (i in 1:numtrials){
s1 = which.min(abs(eyetracking_data$time - trial_start_times[i]))
e1 = which.min(abs(eyetracking_data$time - trial_end_times[i]))
s2 = e1 + 1
if (i<numtrials) {
e2 = which.min(abs(eyetracking_data$time - trial_start_times[i+1])) - 1
} else {
e2 = length(eyetracking_data$time)
}
eyetracking_data$phase[s1:e1]="trial"
eyetracking_data$value[s1:e1]=behavioral$bidInd[i]
eyetracking_data$phase[s2:e2]="ISI"
eyetracking_data$trial[s1:e2]=i
behavioral$gaze_stim [i] = mean(eyetracking_data$looking_at_stim[s1:e1])
behavioral$gaze_ISI [i] = mean(eyetracking_data$looking_at_stim[s2:e2])
}
eyetracking_data$ishvitem = eyetracking_data$value <=30
eyetracking_data$isgoitem = eyetracking_data$value %in% go_items
eyetracking_data$isprobeitem = eyetracking_data$value %in% probe_items
eyetrack_tmp = eyetracking_data[eyetracking_data$phase %in% "trial",]
eyetrack_merged = rbind(eyetrack_merged,eyetrack_tmp)
behave_merged = rbind(behave_merged,behavioral)
# output_filename = paste0(output_path,tail(unlist(strsplit( filelist$behavioral[file_i],'/')),n=1))
# write.table(eyetracking_data,file=output_filename,sep = '\t',row.names = F)
}
behave_merged$scan = as.factor(behave_merged$scan)
print ('Completed! Saving all data into R data frame')
output_filename = paste0(output_path,'Eyetracking_Task_',task_name,'_Session',sessionNum,'.Rda')
output_filename = paste0(output_path,'Summary_Task_',task_name,'_Session',sessionNum,'.Rda')
print (paste0('Done. You can find the data at: ',output_filename))
# Statistics
descriptive_by_subject = data.frame(with(behave_merged,tapply(gaze_stim , list(subjectID,scan),mean)))
subs2exclude = rownames(descriptive_by_subject[which (descriptive_by_subject$X1 < 0.5 | descriptive_by_subject$X2 <0.5),])
#subs2exclude=c()
data2analyze = behave_merged[!behave_merged$subjectID %in% subs2exclude,]
descriptive = data.frame(with(data2analyze,tapply(gaze_stim , list(isgoitem,scan),mean)))
rownames(descriptive) = c("NoGo", "Go")
colnames(descriptive) = paste0('Scan_',levels(data2analyze$scan))
print('mean proportion of the trial participants viewed the stimulus')
print(descriptive)
summary(lmer(gaze_stim ~ isgoitem * ishvitem * scan + (1|subjectID), data = subset(data2analyze, isprobeitem)))
summary(lmer(gaze_stim ~ isgoitem * ishvitem + (1|subjectID), data = subset(data2analyze, isprobeitem)))
summary(lmer(gaze_stim ~ isgoitem * scan + (1|subjectID), data = subset(data2analyze, isprobeitem)))
